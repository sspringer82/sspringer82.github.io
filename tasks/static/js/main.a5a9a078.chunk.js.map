{"version":3,"sources":["task.ts","List/Item.tsx","List/List.tsx","SideBar/SideBar.tsx","taskContext.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Task","title","user","done","id","Object","classCallCheck","this","short","description","created","Date","now","Item","_ref","task","moment","format","react_default","a","createElement","Card","className","Hidden","mdDown","Check_default","Close_default","List","tasks","map","Item_Item","key","SideBar","length","filter","t","taskContext","React","createContext","Dexie","db","version","stores","table","put","App","_useState","useState","_useState2","slicedToArray","setTasks","useEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","toArray","t1","sent","stop","apply","arguments","fetchData","src_taskContext","Provider","value","Grid","container","spacing","item","lg","xs","List_List","SideBar_SideBar","Fab","color","aria-label","Add_default","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a5a9a078.chunk.js","sourcesContent":["export default class Task {\n  public short?: string;\n  public description?: string;\n  public created: number;\n\n  constructor(\n    public title: string,\n    public user: string,\n    public done: boolean,\n    public id?: number\n  ) {\n    this.created = Date.now();\n  }\n}\n","import React from 'react';\nimport Task from '../task';\nimport Card from '@material-ui/core/Card';\n\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport './Item.scss';\nimport moment from 'moment';\nimport { Hidden } from '@material-ui/core';\n\ninterface Props {\n  task: Task;\n}\n\nexport default function Item({ task }: Props) {\n  const created = moment(task.created).format('MMMM Do YYYY, h:mm:ss a');\n\n  return (\n    <Card className=\"item\">\n      <div>\n        <div className=\"title\">{task.title}</div>\n        <Hidden mdDown>\n          <div className=\"infoRow\">\n            <div>{task.user}</div>\n            <div>{created}</div>\n          </div>\n        </Hidden>\n      </div>\n      <div className=\"status\">{task.done ? <CheckIcon /> : <CloseIcon />}</div>\n    </Card>\n  );\n}\n","import React from 'react';\nimport Task from '../task';\nimport Item from './Item';\n\nimport './List.scss';\n\ninterface Props {\n  tasks: Task[];\n}\n\nexport default function List({ tasks }: Props) {\n  return (\n    <div className=\"list\">\n      {tasks.map(task => (\n        <Item key={task.id} task={task} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport './SideBar.scss';\nimport { Card } from '@material-ui/core';\nimport Task from '../task';\n\ninterface Props {\n  tasks: Task[];\n}\n\nexport default function SideBar({ tasks }: Props) {\n  return (\n    <Card className=\"sideBar\">\n      <h1>Hi Basti</h1>\n      <div>Great to have you here</div>\n\n      <h2>your stats:</h2>\n\n      <div>count: {tasks.length}</div>\n      <div>done: {tasks.filter(t => t.done).length}</div>\n    </Card>\n  );\n}\n","import React from 'react';\nimport Dexie from 'dexie';\n\nconst taskContext = React.createContext<Dexie>(new Dexie('Tasks'));\nexport default taskContext;\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Task from './task';\nimport List from './List/List';\nimport { Grid, Hidden, Fab } from '@material-ui/core';\nimport SideBar from './SideBar/SideBar';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport Dexie from 'dexie';\nimport TaskContext from './taskContext';\n\nconst db = new Dexie('Tasks');\n\ndb.version(1).stores({\n  tasks: 'id++,title',\n});\n\ndb.table('tasks').put(new Task('Get up', 'Basti', true, 1));\ndb.table('tasks').put(new Task('Eat', 'Basti', true, 2));\ndb.table('tasks').put(new Task('Sleep', 'Basti', false, 3));\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setTasks(await db.table('tasks').toArray());\n    };\n    fetchData();\n  }, []);\n  return (\n    <TaskContext.Provider value={db}>\n      <Grid container spacing={2}>\n        <Grid item lg={2} />\n        <Grid item lg={6} xs={12}>\n          <List tasks={tasks} />\n        </Grid>\n        <Grid item lg={2}>\n          <Hidden mdDown>\n            <SideBar tasks={tasks} />\n          </Hidden>\n        </Grid>\n        <Grid item lg={2} />\n      </Grid>\n      <Fab color=\"primary\" aria-label=\"Add\" className=\"fab\">\n        <AddIcon />\n      </Fab>\n    </TaskContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}